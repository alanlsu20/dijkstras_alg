In this .txt file we should write up the discussion of our project:


From the project document:
The discussion (graded): Say something about your work.
• Write your document in LaTeX. (I’ll post templates that include formatting python
code and math -just the bare minimum is needed here; learning TeX a low priority).
• Description: Give an informal discussion of your code - how it works, how you
organized the code, and and the main computational challenges (what is notable about
it?). This is not formal documentation; just a chance for you to share what you’ve
done. You can include a bit of the necessary mathematical context, but this is not a
focus.
• Discussion: Discuss your results - analyze the output of your code applied to some
problem. The amount to discuss depends on the project; you may find there is more
to say on the computational side whereas other projects are more about exploring an
application. What interesting features have you identified?


From piazza:
As a reminder, you should write a brief discussion of your project 
(see part C of the project description). This should be a file in your repository. 
Think of it as a sort of brief tour of your problem and and interesting features for the 
viewer of your code.

It doesn't have toi be long, but I do expect there to be something. What you 
point out will help me to be able to give you credit for your work 
(you are, in a sense, defining what you've done).

I noted that it should be written in LaTeX - this is not a requirement as 
previously stated. It's probably easiest to use latex if you have math to 
format, but you are likely writing mostly text and code. You can refer to code 
in your discussion (e.g. code example functions), and let those examples help 
to illustrate your points.






In addition to the aforementioned description of our implementation of
Dijkstra's algorithm as well as a Grid Class, for our project we decided to add
an additional parameter of "avoidance".We recognized that merely having 
Dijkstra's to dictate a path of shortest distance was highly idealized and 
would only be realistic in a vacuum. In actuality, there are many other factors
that might impact one's decision of route or the time taken to traverse a path
rather than merely distance. For instance, while navigating a city, there might
be certain areas known to have heavy traffic, or other streets that are closed
for construction. Therefore, you might have prior knowledge of particular 
locations that you wish to avoid, even if "by the crow fly's" purely from a
distance standpoint - it might be the believed shortest path. As such, within
our Dijkstra funtion, by specifying nodes that you wish to avoid (this
parameter is vectorized as well - so you can input multiple nodes at once), it
retroactively alters all adjacent distances to the nodes in question to an 
infinite distance, so that upon running Dijkstra standard algorithm, those
nodes are for certain left off the resultant ideal path. Ultimately, this 
project aided in demonstrating how an algorithm can begin to be made more 
adaptive in order to be more correctly implemented for a real world model or 
scenario.